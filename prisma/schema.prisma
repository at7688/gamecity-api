generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id            String           @id @default(cuid())
  username      String           @unique
  password      String
  nickname      String
  admin_role_id String
  is_active     Boolean          @default(true)
  created_at    DateTime         @default(now()) @db.Timestamptz()
  updated_at    DateTime         @updatedAt @db.Timestamptz()
  is_blocked    Boolean          @default(false)
  admin_role    AdminRole        @relation(fields: [admin_role_id], references: [id])
  inboxs        Inbox[]
  login_rec     LoginRec[]
  operations    OperationRec[]
  wallet_rec    WalletRec[]
  transfer_rec  TransferRec[]
  identities    IdentityVerify[]
}

model Permission {
  id         String @id @default(cuid())
  name       String @unique
  controller String
  handler    String
  menus      Menu[]

  @@unique([controller, handler], name: "controller_handler")
}

model AdminRole {
  id    String      @id @default(cuid())
  name  String
  code  String      @unique
  users AdminUser[]
  menu  Menu[]
}

model OperationRec {
  id          Int       @id @default(autoincrement())
  controller  String
  handler     String
  operator_id String
  reqBody     Json?
  path        String
  target_id   String?
  method      String
  operated_at DateTime  @default(now())
  operator    AdminUser @relation(fields: [operator_id], references: [id])
}

model Announcement {
  id         String           @id @default(cuid())
  title      String
  content    String?
  start_at   DateTime?        @db.Timestamptz(6)
  end_at     DateTime?        @db.Timestamptz(6)
  created_at DateTime         @default(now()) @db.Timestamptz()
  updated_at DateTime         @updatedAt @db.Timestamptz()
  type       AnnouncementType
  is_active  Boolean          @default(true)
  link       String?
  is_new_win Boolean          @default(false)
  is_top     Boolean          @default(false)
  sort       Int              @default(autoincrement())
}

model Menu {
  id           String       @id @default(cuid())
  name         String
  root_menu_id String?
  sort         Int          @default(autoincrement())
  icon         String?
  path         String?      @unique
  root_menu    Menu?        @relation("root", fields: [root_menu_id], references: [id])
  sub_menus    Menu[]       @relation("root")
  admin_roles  AdminRole[]
  permissions  Permission[]
}

model PromoCode {
  code   String  @id
  agent  Member?
  player Player?
}

model ChipsRec {
  id         String   @id @default(cuid())
  player_id  String
  qty        Float
  created_at DateTime @default(now()) @db.Timestamptz()
  type       Int
  player     Player   @relation(fields: [player_id], references: [id])
}

model RotationGroup {
  id           Int           @id @default(autoincrement())
  sort         Int           @default(autoincrement())
  name         String
  note         String?
  type         Int // 銀行卡/支付工具
  company_card CompanyCard[]
  payment_tool PaymentTool[]
  card_vip     Vip[]         @relation("card")
  payment_vip  Vip[]         @relation("payment")
}

model PlayerCard {
  id           String   @id @default(cuid())
  bank_code    String
  branch       String
  name         String
  account      String
  player_id    String
  is_default   Boolean  @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz()
  updated_at   DateTime @updatedAt @db.Timestamptz()
  valid_status Int      @default(1) // 尚未審核 審核中 審核通過 退回
  imgs         Image[]
  player       Player   @relation(fields: [player_id], references: [id])

  bank_deposits BankDepositRec[]
  withdraws     WithdrawRec[]

  inner_note  String?
  outter_note String?
}

model CompanyCard {
  id            String           @id @default(cuid())
  bank_code     String
  branch        String
  name          String
  account       String
  rotation_id   Int
  deposit_max   Int
  deposit_min   Int
  recharge_max  Int
  rotation      RotationGroup    @relation(fields: [rotation_id], references: [id])
  bank_deposits BankDepositRec[]
  sort          Int              @default(autoincrement())
  is_active     Boolean          @default(false)
  is_current    Boolean          @default(false)

  accumulate_from DateTime @default(now()) @db.Timestamptz()
}

model BankDepositRec {
  id             String      @id @default(cuid())
  player_id      String
  amount         Float
  created_at     DateTime    @default(now()) @db.Timestamptz()
  updated_at     DateTime    @updatedAt @db.Timestamptz()
  card_id        String
  status         Int         @default(1) // 等待付款 等待審核 完成核發 取消申請 拒絕退回 已過期
  player_card    PlayerCard  @relation(fields: [player_card_id], references: [id])
  player_card_id String
  inner_note     String?
  outter_note    String?
  card           CompanyCard @relation(fields: [card_id], references: [id])
  player         Player      @relation(fields: [player_id], references: [id])
}

model WithdrawRec {
  id             String     @id @default(cuid())
  player_id      String
  amount         Float
  created_at     DateTime   @default(now()) @db.Timestamptz()
  updated_at     DateTime   @updatedAt @db.Timestamptz()
  finished_at    DateTime?  @db.Timestamptz()
  status         Int        @default(1) // 等待審核 處理中 完成出金 會員取消 拒絕退回
  player_card    PlayerCard @relation(fields: [player_card_id], references: [id])
  player_card_id String
  inner_note     String?
  outter_note    String?
  player         Player     @relation(fields: [player_id], references: [id])
  withdraw_fee   Float      @default(0)
}

model WalletRec {
  id             String     @id @default(cuid())
  type           Int // 儲值加點,轉入,轉出,提領扣點,注金加扣,活動贈點,人工加點,人工扣點,金流手續費,退水,佔成
  player         Player?    @relation(fields: [player_id], references: [id])
  player_id      String?
  agent          Member?    @relation(fields: [agent_id], references: [id])
  agent_id       String?
  origin_amount  Float
  amount         Float
  fee            Float      @default(0)
  operator       AdminUser? @relation(fields: [operator_id], references: [id])
  operator_id    String?
  created_at     DateTime   @default(now()) @db.Timestamptz()
  source         String
  note           String?
  relative_id    String?
  rolling_demand Int        @default(1)
}

// model BalanceOperation {
//   id String @id @default(cuid())
//   type Int  @default(1) // 代理, 會員
//   note String?
//   amount Float
//   created_at     DateTime   @default(now()) @db.Timestamptz()
// }

model TransferRec {
  id               String     @id @default(cuid())
  type             Int // 給會員, 給代理,
  source           Member?    @relation("source", fields: [source_id], references: [id])
  source_id        String?
  target_player    Player?    @relation(fields: [target_player_id], references: [id])
  target_player_id String?
  target_agent     Member?    @relation("target_agent", fields: [target_agent_id], references: [id])
  target_agent_id  String?
  operator         AdminUser? @relation(fields: [operator_id], references: [id])
  operator_id      String?
  amount           Float
  rolling_demand   Int // 洗碼倍數
  inner_note       String?
  outter_note      String?
  created_at       DateTime   @default(now()) @db.Timestamptz()
}

model Player {
  id               String              @id @default(cuid())
  username         String              @unique
  password         String
  nickname         String
  created_at       DateTime            @default(now()) @db.Timestamptz()
  updated_at       DateTime            @updatedAt @db.Timestamptz()
  is_active        Boolean             @default(true)
  is_blocked       Boolean             @default(false)
  promo_code       String?             @unique
  vip_id           String?
  agent_id         String
  inviter_id       String?
  is_lock_bet      Boolean             @default(false)
  agent            Member              @relation(fields: [agent_id], references: [id])
  inviter          Player?             @relation("player", fields: [inviter_id], references: [id])
  promo            PromoCode?          @relation(fields: [promo_code], references: [code])
  vip              Vip?                @relation(fields: [vip_id], references: [id])
  bank_deposits    BankDepositRec[]
  withdraws        WithdrawRec[]
  payment_deposits PaymentDepositRec[]
  chips_records    ChipsRec[]
  contact          Contact?
  inboxs           Inbox[]
  login_rec        LoginRec[]
  invites          Player[]            @relation("player")
  bankcard         PlayerCard[]
  wallet_rec       WalletRec[]
  transfer_rec     TransferRec[]
  bet_records     BetRecord[]
  game_accounts     GameAccount[]

  withdraw_nums Int   @default(0)
  balance       Float @default(0)

  identity IdentityVerify?

}

model Member {
  id                String        @id @default(cuid())
  username          String        @unique
  password          String
  nickname          String
  created_at        DateTime      @default(now()) @db.Timestamptz()
  updated_at        DateTime      @updatedAt @db.Timestamptz()
  parent_id         String?
  promo_code        String?       @unique
  is_active         Boolean       @default(true)
  layer             Int           @default(1)
  is_blocked        Boolean       @default(false)
  balance           Float         @default(0)
  parent            Member?       @relation("agent", fields: [parent_id], references: [id])
  promo             PromoCode?    @relation(fields: [promo_code], references: [code])
  contact           Contact?
  sended_inboxs     Inbox[]       @relation("from")
  received_inboxs   Inbox[]       @relation("to")
  login_rec         LoginRec[]
  subs              Member[]      @relation("agent")
  players           Player[]
  transfer_sends    TransferRec[] @relation("source")
  transfer_recieves TransferRec[] @relation("target_agent")
  wallet_rec        WalletRec[]

  game_ratios GameRatio[]
  bet_ratio_rec BetRatioRec[]
}

model IdentityVerify {
  id          String     @id @default(cuid())
  player      Player     @relation(fields: [player_id], references: [id])
  player_id   String     @unique
  status      Int        @default(1) // 待處理, 審核中, 已通過, 已駁回
  id_card_num String
  imgs        Image[]
  inner_note  String?
  outter_note String?
  operator    AdminUser? @relation(fields: [operator_id], references: [id])
  operator_id String?
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @updatedAt @db.Timestamptz(6)
}

model Contact {
  id        Int     @id @default(autoincrement())
  phone     String
  telegram  String?
  email     String?
  agent_id  String? @unique
  player_id String? @unique
  line_id   String?
  agent     Member? @relation(fields: [agent_id], references: [id])
  player    Player? @relation(fields: [player_id], references: [id])
}

model Vip {
  id                String        @id @default(cuid())
  name              String
  icon              String?
  ebet_min          Int
  deposite_min      Int
  withdraw_min      Int
  withdraw_max      Int
  card_rotate_id    Int
  payment_rotate_id Int
  card_rotate       RotationGroup @relation("card", fields: [card_rotate_id], references: [id])
  payment_rotate    RotationGroup @relation("payment", fields: [payment_rotate_id], references: [id])
  players           Player[]
  promotions Promotion[]

  withdraw_fee_1 Float @default(0)
  withdraw_fee_2 Float @default(0)
  withdraw_fee_3 Float @default(0)
  withdraw_fee   Float @default(0)
}

model LoginRec {
  id            Int          @id @default(autoincrement())
  admin_user_id String?
  agent_id      String?
  ip            String?
  login_at      DateTime     @default(now()) @db.Timestamptz()
  nums_failed   Int          @default(0)
  failed_msg    String?
  player_id     String?
  platform      PlatformType
  admin_user    AdminUser?   @relation(fields: [admin_user_id], references: [id])
  agent         Member?      @relation(fields: [agent_id], references: [id])
  player        Player?      @relation(fields: [player_id], references: [id])
}

model Banner {
  id         String    @id @default(cuid())
  platform   Int // PC Mobile
  img        Image?
  title      String
  lang       String // en, tw, cn
  link       String?
  is_new_win Boolean   @default(false)
  is_active  Boolean
  sort       Int
  start_at   DateTime? @db.Timestamptz()
  end_at     DateTime? @db.Timestamptz()
}

model PageContent {
  id         Int      @id @default(autoincrement())
  code       String // ABOUT, QA
  title      String // 關於我們, 隱私權政策
  content    String
  lang       String // en, tw, cn
  updated_at DateTime @updatedAt @db.Timestamptz()

  @@unique([code, lang])
}

model GameCategory {
  code      String         @id
  name      String
  sort      Int            @default(0)
  platforms GamePlatform[]
}

model Maintenance {
  id Int @id @default(autoincrement())
  target_type Int // 主站 遊戲商
  platform GamePlatform? @relation(fields: [platform_code], references: [code])
  platform_code String?
  start_at   DateTime? @db.Timestamptz()
  end_at     DateTime? @db.Timestamptz()
}

model GamePlatform {
  code          String       @id
  name          String
  status        Int          @default(1) // 啟用 停用 維護中
  sort          Int          @default(0)
  games         Game[]
  category      GameCategory @relation(fields: [category_code], references: [code])
  category_code String
  exchange_rate Float @default(1) // 兌換台幣匯率
  bet_records BetRecord[]
  accounts GameAccount[]
  currency Int @default(1) // 新台幣 人民幣...
  maintenance Maintenance[]
  record_check_at DateTime? @db.Timestamptz()

  @@unique([code, category_code])
}

model Game {
  id            String       @id @default(cuid())
  name          String
  code String
  sort          Int          @default(0)
  platform      GamePlatform @relation(fields: [platform_code], references: [code])
  platform_code String
  bet_records BetRecord[]
  ratio GameRatio[]
  water GameWater[]

  @@unique([code, platform_code])
}

model Inbox {
  id             String     @id @default(cuid())
  from_user_id   String?
  from_member_id String?
  to_member_id   String?
  opened_at      DateTime?  @db.Timestamptz()
  inbox_rec_id   String
  to_player_id   String?
  from_member    Member?    @relation("from", fields: [from_member_id], references: [id])
  from_user      AdminUser? @relation(fields: [from_user_id], references: [id])
  inbox_rec      InboxRec   @relation(fields: [inbox_rec_id], references: [id], onDelete: Cascade)
  to_member      Member?    @relation("to", fields: [to_member_id], references: [id])
  to_player      Player?    @relation(fields: [to_player_id], references: [id])
}

model InboxRec {
  id          String   @id @default(cuid())
  title       String
  content     String
  sended_at   DateTime @default(now()) @db.Timestamptz()
  target_type Int
  inboxs      Inbox[]
}

// 支付方式
model Payway {
  id                 String      @id @default(cuid())
  type               PayType
  code               String // 金流廠商渠道代號
  name               String?
  player_fee_amount  Float       @default(0)
  player_fee_percent Float       @default(0)
  player_fee_min     Float       @default(10)
  player_fee_max     Float       @default(200)
  fee_amount         Float       @default(0)
  fee_percent        Float       @default(0)
  fee_min            Float       @default(10)
  fee_max            Float       @default(200)
  tool_id            String
  deposit_max        Int
  deposit_min        Int
  tool               PaymentTool @relation(fields: [tool_id], references: [id])
  is_active          Boolean     @default(false)

  records PaymentDepositRec[]


  @@unique([tool_id, code])
}

enum MerchantCode {
  QIYU
  ECPAY
}

// 金流廠商
model PaymentMerchant {
  id        String       @id @default(cuid())
  name      String
  code      MerchantCode @unique
  is_active Boolean      @default(true)

  config Json?

  paymentTools PaymentTool[]

  records PaymentDepositRec[]
  orders  MerchantOrder[]

}

// 支付工具
model PaymentTool {
  id           String  @id @default(cuid())
  tool_name    String
  rotation_id  Int
  is_active    Boolean @default(true)
  recharge_max Int     @default(0)

  accumulate_from DateTime @default(now()) @db.Timestamptz()

  note        String?
  rotation    RotationGroup   @relation(fields: [rotation_id], references: [id])
  merchant    PaymentMerchant @relation(fields: [merchant_id], references: [id])
  merchant_id String
  payways     Payway[]

  sort       Int     @default(autoincrement())
  is_current Boolean @default(false)

  merchant_config Json?

}

// 支付工具儲值紀錄(站內)
model PaymentDepositRec {
  id            String          @id @default(cuid())
  amount        Float
  created_at    DateTime        @default(now()) @db.Timestamptz()
  paid_at       DateTime?       @db.Timestamptz()
  finished_at   DateTime?       @db.Timestamptz() // 補點完成時間
  canceled_at   DateTime?       @db.Timestamptz()
  expired_at    DateTime?       @db.Timestamptz()
  payway        Payway          @relation(fields: [payway_id], references: [id])
  payway_id     String
  player        Player          @relation(fields: [player_id], references: [id])
  player_id     String
  fee_on_player Float           @default(0) // 會員負擔手續費
  fee           Float           @default(0) // 金流商收取的手續費
  merchant      PaymentMerchant @relation(fields: [merchant_id], references: [id])
  merchant_id   String

  order  MerchantOrder?
  status Int            @default(1) // 尚未付款 已付款 等待入點 已過期 拒絕退回
}

// 金流商回傳資料紀錄
model MerchantOrder {
  trade_no   String            @id
  record     PaymentDepositRec @relation(fields: [record_id], references: [id])
  record_id  String            @unique
  created_at DateTime          @default(now()) @db.Timestamptz()
  expired_at DateTime?         @db.Timestamptz()
  paid_at    DateTime?         @db.Timestamptz()
  price      Float
  status     Int               @default(1) // 等待付款 已繳費 已過期 拒絕退回

  merchant    PaymentMerchant @relation(fields: [merchant_id], references: [id])
  merchant_id String

  channel String

  pay_code     String? // 超商付款代碼
  bank_code    String? // 銀行代碼
  bank_account String? // ATM付款帳號

  extra Json?

  notify Json?
}

model MerchantLog {
  id            Int          @id @default(autoincrement())
  created_at    DateTime     @default(now()) @db.Timestamptz()
  action  String?
  merchant_code String
  data          Json?
}

model Image {
  id         Int      @id @default(autoincrement())
  path       String
  filename   String
  type       Int // 會員銀行存摺, ...
  created_at DateTime @default(now()) @db.Timestamptz()

  p_card    PlayerCard? @relation(fields: [p_card_id], references: [id])
  p_card_id String?

  banner    Banner? @relation(fields: [banner_id], references: [id])
  banner_id String? @unique

  identity    IdentityVerify? @relation(fields: [identity_id], references: [id])
  identity_id String?

}

model Bank {
  code      String  @id
  name      String
  is_active Boolean @default(true)
}

model GameWater {
  game_code String
  platform_code String
  game Game @relation(fields: [game_code, platform_code], references: [code, platform_code])
  promotion Promotion @relation(fields: [promotion_id], references: [id])
  promotion_id String
  water Float // 0.01 (1%)

  @@unique([platform_code, game_code , promotion_id])
}


model Promotion {
  id String @id @default(cuid())
  type Int // 首儲獎勵 續儲獎勵 遊戲返水
  title String
  start_at   DateTime? @db.Timestamptz()
  end_at     DateTime? @db.Timestamptz()
  is_active Boolean @default(false)
  apply_approval_type Int @default(1) // 人工審核 自動審核
  auto_apply_schedule Int? // 立即 每天固定時間 每週固定時間
  pay_approval_type Int @default(1) // 人工派發 自動派發
  auto_pay_schedule Int? // 立即 每天固定時間 每週固定時間
  vips Vip[]
  game_water GameWater[] // 返水活動(遊戲退水%)
  rolling_demand Int @default(1) // 洗碼倍數
  reward_max Int @default(0) // 獎勵金上限 (0為無上限)
  applicants_max Int @default(0) // 申請人數上限 (0為無上限)
  each_apply_times Int @default(1) // 每人可申請次數 (預設1次, 0為無上限)
}



model BetRecord {
  id String @id @default(cuid())
  bet_no String
  player Player @relation(fields: [player_id], references: [id])
  player_id String
  status Int @default(1) // 投注中 已派彩 已退款
  amount Float
  valid_amount Float?
  win_lose_amount Float?
  bet_at DateTime @db.Timestamptz()
  result_at DateTime? @db.Timestamptz()
  platform GamePlatform @relation(fields: [platform_code, category_code], references: [code, category_code])
  category_code String
  platform_code String
  game Game? @relation(fields: [game_code, platform_code], references: [code, platform_code])
  game_code String? // 遊戲類型 (普通百家乐,..)
  bet_target String? // 下注目標 (莊,閒,和,..)
  bet_detail Json?
  ratios BetRatioRec[]

  @@unique([bet_no, platform_code])
}

model BetRatioRec {
  agent Member @relation(fields: [agent_id], references: [id])
  agent_id String
  bet BetRecord @relation(fields: [bet_id], references: [id])
  bet_id String
  ratio Float

  @@unique([agent_id, bet_id])
}

model GameAccount {
  id Int @id @default(autoincrement())
  platform GamePlatform @relation(fields: [platform_code], references: [code])
  platform_code String
  account String
  password String?
  player Player @relation(fields: [player_id], references: [id])
  player_id String
  created_at DateTime @default(now()) @db.Timestamptz()

  @@unique([platform_code, account])
  @@unique([platform_code, player_id])
}

model GameRatio {
  game_code String
  platform_code String
  game Game @relation(fields: [game_code, platform_code], references: [code, platform_code])
  agent Member @relation(fields: [agent_id], references: [id])
  agent_id String
  ratio Float
  water Float @default(0)

  @@unique([platform_code, game_code, agent_id])
}



enum PlatformType {
  ADMIN
  AGENT
  PLAYER
}

enum PayType {
  CVS
  BARCODE
  CREDIT
  ATM
}

enum AnnouncementType {
  GAME
  OPERATION
  EVENT
  SERVICE
}
