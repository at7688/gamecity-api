// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 管理員帳號
model AdminUser {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  nickname      String?
  operations    OperationRec[]
  admin_role    AdminRole      @relation(fields: [admin_role_id], references: [id])
  admin_role_id String
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
}

// 權限
model Permission {
  id         String @id @default(cuid())
  name       String @unique
  controller String
  handler    String
  menus      Menu[]

  @@unique([controller, handler], name: "controller_handler")
}

// 管理員角色
model AdminRole {
  id    String      @id @default(cuid())
  name  String
  code  String      @unique
  menu  Menu[]
  users AdminUser[]

}

// 操作記錄
model OperationRec {
  id          Int       @id @default(autoincrement())
  controller  String
  handler     String
  operator    AdminUser @relation(fields: [operator_id], references: [id])
  operator_id String
  reqBody     Json?
  path        String
  target_id   String?
  method      String
  operated_at DateTime  @default(now())
}

// 最新消息
enum AnnouncementType {
  GAME
  OPERATION
  EVENT
  SERVICE
}

// 最新消息
model Announcement {
  id         String           @id @default(cuid())
  title      String
  content    String?
  start_at   DateTime?        @db.Timestamp()
  end_at     DateTime?        @db.Timestamp()
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  type       AnnouncementType
  is_active  Boolean          @default(true)
  link       String?
  is_new_win Boolean          @default(false)
  is_top     Boolean          @default(false)
  sort       Int              @default(autoincrement())
}

// 選單
model Menu {
  id          String       @id @default(cuid())
  name        String
  permissions Permission[]

  admin_roles AdminRole[]

  root_menu_id String?
  root_menu    Menu?   @relation("root", fields: [root_menu_id], references: [id])
  sub_menus    Menu[]  @relation("root")
}

enum MemberType {
  PLAYER
  AGENT
}

// 階層會員
model Member {
  id         String     @id @default(cuid())
  username   String     @unique
  password   String
  nickname   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  promo_code String?    @unique()
  type       MemberType
  layer Int @default(1)
  is_active Boolean  @default(true)

  parent    Member? @relation("agent", fields: [parent_id], references: [id])
  parent_id String?
  subs Member[] @relation("agent")
}
