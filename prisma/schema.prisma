generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id            String           @id @default(cuid())
  username      String           @unique
  password      String
  nickname      String
  admin_role_id String
  is_active     Boolean          @default(true)
  created_at    DateTime         @default(now()) @db.Timestamptz()
  updated_at    DateTime         @updatedAt @db.Timestamptz()
  is_blocked    Boolean          @default(false)
  admin_role    AdminRole        @relation(fields: [admin_role_id], references: [id])
  inboxs        Inbox[]
  login_rec     LoginRec[]
  operations    OperationRec[]
  wallet_rec    WalletRec[]
  identities    IdentityVerify[]
}

model Permission {
  id         String @id @default(cuid())
  name       String @unique
  controller String
  handler    String
  menus      Menu[]

  @@unique([controller, handler], name: "controller_handler")
}

model AdminRole {
  id    String      @id @default(cuid())
  name  String
  code  String      @unique
  users AdminUser[]
  menu  Menu[]
}

model OperationRec {
  id          Int       @id @default(autoincrement())
  controller  String
  handler     String
  operator_id String
  reqBody     Json?
  path        String
  target_id   String?
  method      String
  operated_at DateTime  @default(now())
  operator    AdminUser @relation(fields: [operator_id], references: [id])
}

model Announcement {
  id         String           @id @default(cuid())
  title      String
  content    String?
  start_at   DateTime?        @db.Timestamptz(6)
  end_at     DateTime?        @db.Timestamptz(6)
  created_at DateTime         @default(now()) @db.Timestamptz()
  updated_at DateTime         @updatedAt @db.Timestamptz()
  type       AnnouncementType
  is_active  Boolean          @default(true)
  link       String?
  is_new_win Boolean          @default(false)
  is_top     Boolean          @default(false)
  sort       Int              @default(autoincrement())
}

model Menu {
  id           String       @id @default(cuid())
  name         String
  root_menu_id String?
  sort         Int          @default(autoincrement())
  icon         String?
  path         String?      @unique
  root_menu    Menu?        @relation("root", fields: [root_menu_id], references: [id])
  sub_menus    Menu[]       @relation("root")
  admin_roles  AdminRole[]
  permissions  Permission[]
}

model PromoCode {
  code       String   @id
  type Int  @default(1) // 會員推廣 代理推廣
  is_active  Boolean  @default(true)
  parent     Member  @relation("parent", fields: [parent_id], references: [id])
  parent_id  String
  inviter    Player?  @relation("inviter", fields: [inviter_id], references: [id])
  inviter_id String?
  players    Player[]
  agents     Member[]
  created_at DateTime @default(now()) @db.Timestamptz()
  note       String?
  ips        String[]
}

model ChipsRec {
  id         String   @id @default(cuid())
  player_id  String
  qty        Float
  created_at DateTime @default(now()) @db.Timestamptz()
  type       Int
  player     Player   @relation(fields: [player_id], references: [id])
}

model RotationGroup {
  id           Int           @id @default(autoincrement())
  sort         Int           @default(autoincrement())
  name         String
  note         String?
  type         Int // 銀行卡/支付工具
  company_card CompanyCard[]
  payment_tool PaymentTool[]
  card_vip     Vip[]         @relation("card")
  payment_vip  Vip[]         @relation("payment")
}

model PlayerCard {
  id           String   @id @default(cuid())
  bank_code    String
  branch       String
  name         String
  account      String
  player_id    String
  is_default   Boolean  @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz()
  updated_at   DateTime @updatedAt @db.Timestamptz()
  valid_status Int      @default(1) // 尚未審核 審核中 審核通過 退回
  imgs         Image[]
  player       Player   @relation(fields: [player_id], references: [id])

  bank_deposits BankDepositRec[]
  withdraws     WithdrawRec[]

  inner_note  String?
  outter_note String?
}

model CompanyCard {
  id            String           @id @default(cuid())
  bank_code     String
  branch        String
  name          String
  account       String
  rotation_id   Int
  deposit_max   Int
  deposit_min   Int
  recharge_max  Int
  rotation      RotationGroup    @relation(fields: [rotation_id], references: [id])
  bank_deposits BankDepositRec[]
  sort          Int              @default(autoincrement())
  is_active     Boolean          @default(false)
  is_current    Boolean          @default(false)

  accumulate_from DateTime @default(now()) @db.Timestamptz()
}

model BankDepositRec {
  id             String      @id @default(cuid())
  player_id      String
  amount         Float
  created_at     DateTime    @default(now()) @db.Timestamptz()
  updated_at     DateTime    @updatedAt @db.Timestamptz()
  card_id        String
  status         Int         @default(1) // 等待付款 等待審核 完成核發 取消申請 拒絕退回 已過期
  player_card    PlayerCard  @relation(fields: [player_card_id], references: [id])
  player_card_id String
  inner_note     String?
  outter_note    String?
  card           CompanyCard @relation(fields: [card_id], references: [id])
  player         Player      @relation(fields: [player_id], references: [id])

  is_first Boolean @default(false) // 是否為該玩家首儲

  promotion    Promotion? @relation(fields: [promotion_id], references: [id])
  promotion_id String?
}

model WithdrawRec {
  id             String     @id @default(cuid())
  player_id      String
  amount         Float
  created_at     DateTime   @default(now()) @db.Timestamptz()
  updated_at     DateTime   @updatedAt @db.Timestamptz()
  finished_at    DateTime?  @db.Timestamptz()
  status         Int        @default(1) // 等待審核 處理中 完成出金 會員取消 拒絕退回
  player_card    PlayerCard @relation(fields: [player_card_id], references: [id])
  player_card_id String
  inner_note     String?
  outter_note    String?
  player         Player     @relation(fields: [player_id], references: [id])
  withdraw_fee   Float      @default(0)
}

model WalletRec {
  id             String     @id @default(cuid())
  target         Int        @default(1) // 會員 代理
  type           Int // 儲值加點,轉入,轉出,提領扣點,注金加扣,活動贈點,人工加點,人工扣點,金流手續費,退水,佔成
  player         Player?    @relation(fields: [player_id], references: [id])
  player_id      String?
  agent          Member?    @relation(fields: [agent_id], references: [id])
  agent_id       String?
  origin_balance Float
  result_balance Float
  amount         Float
  fee            Float      @default(0)
  operator       AdminUser? @relation(fields: [operator_id], references: [id])
  operator_id    String?
  created_at     DateTime   @default(now()) @db.Timestamptz()
  source         String
  note           String?
  relative_id    String?
  rolling_amount Float?

  status Int @default(1) // 正常 處理中 失敗
}

model TransferRec {
  id          String   @id @default(cuid())
  source      Member   @relation("source", fields: [source_id], references: [id])
  source_id   String
  target      Member   @relation("target_agent", fields: [target_id], references: [id])
  target_id   String
  amount      Float
  inner_note  String?
  outter_note String?
  created_at  DateTime @default(now()) @db.Timestamptz()
}

model Player {
  id               String              @id @default(cuid())
  username         String              @unique
  password         String
  nickname         String
  created_at       DateTime            @default(now()) @db.Timestamptz()
  updated_at       DateTime            @updatedAt @db.Timestamptz()
  is_active        Boolean             @default(true)
  is_blocked       Boolean             @default(false)
  vip_id           String?
  agent_id         String
  inviter_id       String?
  is_lock_bet      Boolean             @default(false)
  agent            Member              @relation(fields: [agent_id], references: [id])
  inviter          Player?             @relation("player", fields: [inviter_id], references: [id])
  promos           PromoCode[]         @relation("inviter")
  vip              Vip?                @relation(fields: [vip_id], references: [id])
  bank_deposits    BankDepositRec[]
  withdraws        WithdrawRec[]
  payment_deposits PaymentDepositRec[]
  chips_records    ChipsRec[]
  contact          Contact?
  inboxs           Inbox[]
  login_rec        LoginRec[]
  invites          Player[]            @relation("player")
  bankcard         PlayerCard[]
  wallet_rec       WalletRec[]
  bet_records      BetRecord[]
  game_accounts    GameAccount[]

  withdraw_nums Int   @default(0)
  balance       Float @default(0)

  identity IdentityVerify?

  tags PlayerTag[]

  applicants Applicant[]

  gifts Gift[]

  invited      PromoCode? @relation(fields: [invited_code], references: [code])
  invited_code String?

}

model Member {
  id                String        @id @default(cuid())
  username          String        @unique
  password          String
  nickname          String
  created_at        DateTime      @default(now()) @db.Timestamptz()
  updated_at        DateTime      @updatedAt @db.Timestamptz()
  parent_id         String?
  is_active         Boolean       @default(true)
  layer             Int           @default(1)
  is_blocked        Boolean       @default(false)
  balance           Float         @default(0)
  parent            Member?       @relation("agent", fields: [parent_id], references: [id])
  promos            PromoCode[]   @relation("parent")
  contact           Contact?
  sended_inboxs     Inbox[]       @relation("from")
  received_inboxs   Inbox[]       @relation("to")
  login_rec         LoginRec[]
  subs              Member[]      @relation("agent")
  players           Player[]
  transfer_sends    TransferRec[] @relation("source")
  transfer_recieves TransferRec[] @relation("target_agent")
  wallet_rec        WalletRec[]

  game_ratios   GameRatio[]
  bet_ratio_rec BetRatioRec[]

  duty AgentDuty?

  gifts Gift[]

  invited      PromoCode? @relation(fields: [invited_code], references: [code])
  invited_code String?
}

model AgentDuty {
  agent          Member @relation(fields: [agent_id], references: [id])
  agent_id       String @unique
  promotion_duty Float  @default(0)
  fee_duty       Float  @default(0)
}

model IdentityVerify {
  id          String     @id @default(cuid())
  player      Player     @relation(fields: [player_id], references: [id])
  player_id   String     @unique
  status      Int        @default(1) // 待處理, 審核中, 已通過, 已駁回
  id_card_num String
  imgs        Image[]
  inner_note  String?
  outter_note String?
  operator    AdminUser? @relation(fields: [operator_id], references: [id])
  operator_id String?
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @updatedAt @db.Timestamptz(6)
}

model Contact {
  id        Int     @id @default(autoincrement())
  phone     String
  telegram  String?
  email     String?
  agent_id  String? @unique
  player_id String? @unique
  line_id   String?
  agent     Member? @relation(fields: [agent_id], references: [id])
  player    Player? @relation(fields: [player_id], references: [id])
}

model Vip {
  id                String        @id @default(cuid())
  sort  Int @default(autoincrement())
  name              String
  icon              String?
  valid_bet         Int           @default(0) // 有效投注量
  deposit_min      Int  @default(0)   // 最低儲值量
  withdraw_min      Int
  withdraw_max      Int
  card_rotate_id    Int
  payment_rotate_id Int
  card_rotate       RotationGroup @relation("card", fields: [card_rotate_id], references: [id])
  payment_rotate    RotationGroup @relation("payment", fields: [payment_rotate_id], references: [id])
  players           Player[]

  promotions Promotion[]
  game_water GameWater[]


  withdraw_fee_1 Float @default(0)
  withdraw_fee_2 Float @default(0)
  withdraw_fee_3 Float @default(0)
  withdraw_fee   Float @default(0)
}

model SmsMerchant {
  code String @id
  name String
  config Json?
  is_active Boolean @default(true)
}

model LoginRec {
  id            Int          @id @default(autoincrement())
  admin_user_id String?
  agent_id      String?
  ip            String?
  login_at      DateTime     @default(now()) @db.Timestamptz()
  nums_failed   Int          @default(0)
  failed_msg    String?
  player_id     String?
  platform      PlatformType
  admin_user    AdminUser?   @relation(fields: [admin_user_id], references: [id])
  agent         Member?      @relation(fields: [agent_id], references: [id])
  player        Player?      @relation(fields: [player_id], references: [id])

  token String?
}

model Banner {
  id         String    @id @default(cuid())
  platform   Int // PC Mobile
  img        Image?
  title      String
  lang       String // en, tw, cn
  link       String?
  is_new_win Boolean   @default(false)
  is_active  Boolean
  sort       Int
  start_at   DateTime? @db.Timestamptz()
  end_at     DateTime? @db.Timestamptz()
}

model PageContent {
  id         Int      @id @default(autoincrement())
  code       String // ABOUT, QA
  title      String // 關於我們, 隱私權政策
  content    String
  lang       String // en, tw, cn
  updated_at DateTime @updatedAt @db.Timestamptz()

  @@unique([code, lang])
}

model GameCategory {
  code String @id
  name String
  sort Int    @default(0)
  game Game[]
}

model Maintenance {
  id            Int           @id @default(autoincrement())
  type   Int // 主站 遊戲商

  platform      GamePlatform? @relation(fields: [platform_code], references: [code])
  platform_code String?
  game      Game? @relation(fields: [game_id], references: [id])
  game_id String?
  start_at      DateTime?     @db.Timestamptz()
  end_at        DateTime?     @db.Timestamptz()
  repeat_start_at DateTime?     @db.Timestamptz()
  repeat_end_at DateTime?     @db.Timestamptz()

  is_repeat Boolean @default(true)
  status Int @default(1) // 已排程 進行中 已完成
  note String?

}

model GamePlatform {
  code   String @id
  name   String
  status Int    @default(1) // 啟用 停用 維護中
  sort   Int    @default(0)
  games  Game[]

  exchange_rate Float         @default(1) // 兌換台幣匯率
  bet_records   BetRecord[]
  accounts      GameAccount[]
  currency      Int           @default(1) // 新台幣 人民幣...
  maintenance   Maintenance[]

  record_check_at DateTime? @db.Timestamptz()


}

model Game {
  id            String        @id @default(cuid())
  name          String
  code          String
  sort          Int           @default(0)
  platform      GamePlatform  @relation(fields: [platform_code], references: [code])
  platform_code String
  bet_records   BetRecord[]
  ratio         GameRatio[]
  water         GameWater[]
  category      GameCategory? @relation(fields: [category_code], references: [code])
  category_code String?

  status Int    @default(1) // 啟用 停用 維護中

  nums_rolling Float @default(1)

  maintenance Maintenance[]

  @@unique([code, platform_code])
}

model Inbox {
  id             String     @id @default(cuid())
  from_user_id   String?
  from_member_id String?
  to_member_id   String?
  opened_at      DateTime?  @db.Timestamptz()
  inbox_rec_id   String
  to_player_id   String?
  from_member    Member?    @relation("from", fields: [from_member_id], references: [id])
  from_user      AdminUser? @relation(fields: [from_user_id], references: [id])
  inbox_rec      InboxRec   @relation(fields: [inbox_rec_id], references: [id], onDelete: Cascade)
  to_member      Member?    @relation("to", fields: [to_member_id], references: [id])
  to_player      Player?    @relation(fields: [to_player_id], references: [id])
}

model InboxRec {
  id          String   @id @default(cuid())
  title       String
  content     String
  sended_at   DateTime @default(now()) @db.Timestamptz()
  target_type Int
  inboxs      Inbox[]
}

// 支付方式
model Payway {
  id                 String      @id @default(cuid())
  type               PayType
  code               String // 金流廠商渠道代號
  name               String?
  player_fee_amount  Float       @default(0)
  player_fee_percent Float       @default(0)
  player_fee_min     Float       @default(10)
  player_fee_max     Float       @default(200)
  fee_amount         Float       @default(0)
  fee_percent        Float       @default(0)
  fee_min            Float       @default(10)
  fee_max            Float       @default(200)
  tool_id            String
  deposit_max        Int
  deposit_min        Int
  tool               PaymentTool @relation(fields: [tool_id], references: [id])
  is_active          Boolean     @default(false)

  records PaymentDepositRec[]


  @@unique([tool_id, code])
}

enum MerchantCode {
  QIYU
  ECPAY
}

// 金流廠商
model PaymentMerchant {
  id        String       @id @default(cuid())
  name      String
  code      MerchantCode @unique
  is_active Boolean      @default(true)

  config Json?

  paymentTools PaymentTool[]

  records PaymentDepositRec[]

}

// 支付工具
model PaymentTool {
  id           String  @id @default(cuid())
  tool_name    String
  rotation_id  Int
  is_active    Boolean @default(true)
  recharge_max Int     @default(0)

  accumulate_from DateTime @default(now()) @db.Timestamptz()

  note        String?
  rotation    RotationGroup   @relation(fields: [rotation_id], references: [id])
  merchant    PaymentMerchant @relation(fields: [merchant_id], references: [id])
  merchant_id String
  payways     Payway[]

  sort       Int     @default(autoincrement())
  is_current Boolean @default(false)

  merchant_config Json?

}

// 支付工具儲值紀錄(站內)
model PaymentDepositRec {
  id            String          @id @default(cuid())
  amount        Float
  created_at    DateTime        @default(now()) @db.Timestamptz()
  paid_at       DateTime?       @db.Timestamptz()
  finished_at   DateTime?       @db.Timestamptz() // 補點完成時間
  canceled_at   DateTime?       @db.Timestamptz()
  expired_at    DateTime?       @db.Timestamptz()
  payway        Payway          @relation(fields: [payway_id], references: [id])
  payway_id     String
  player        Player          @relation(fields: [player_id], references: [id])
  player_id     String
  fee_on_player Float           @default(0) // 會員負擔手續費
  fee           Float           @default(0) // 金流商收取的手續費
  merchant      PaymentMerchant @relation(fields: [merchant_id], references: [id])
  merchant_id   String

  status Int @default(1) // 尚未付款 已付款 等待入點 已過期 拒絕退回
  // merchant_status Int             @default(1) // 等待付款 已繳費 已過期 拒絕退回

  fee_info Json?

  is_first Boolean @default(false) // 是否為該玩家首儲

  promotion    Promotion? @relation(fields: [promotion_id], references: [id])
  promotion_id String?

  trans_id String? @unique

  pay_code     String? // 超商付款代碼
  bank_code    String? // 銀行代碼
  bank_account String? // ATM付款帳號
  order_info   Json?
  notify_info  Json?
}

model MerchantLog {
  id            Int      @id @default(autoincrement())
  created_at    DateTime @default(now()) @db.Timestamptz()
  action        String?
  merchant_code String
  sendData      Json?
  resData       Json?
  path          String?
  method        String?
}

model Image {
  id         Int      @id @default(autoincrement())
  path       String
  filename   String
  type       Int // 會員銀行存摺, ...
  created_at DateTime @default(now()) @db.Timestamptz()

  p_card    PlayerCard? @relation(fields: [p_card_id], references: [id])
  p_card_id String?

  banner    Banner? @relation(fields: [banner_id], references: [id])
  banner_id String? @unique

  identity    IdentityVerify? @relation(fields: [identity_id], references: [id])
  identity_id String?

}

model Bank {
  code      String  @id
  name      String
  is_active Boolean @default(true)
}

model GameWater {
  id            Int        @id @default(autoincrement())
  game_code     String
  platform_code String
  game          Game       @relation(fields: [game_code, platform_code], references: [code, platform_code])
  promotion     Promotion? @relation(fields: [promotion_id], references: [id])
  promotion_id  String?
  vip           Vip?       @relation(fields: [vip_id], references: [id])
  vip_id        String?
  water         Float // 0.1 (0.1%)

  @@unique([platform_code, game_code, promotion_id])
  @@unique([platform_code, game_code, vip_id])
}

model RechargeReward {
  promotion    Promotion @relation(fields: [promotion_id], references: [id])
  promotion_id String    @unique

  recharge_amount Int

  reward_type    Int // 比例, 固定
  reward_amount  Int?
  reward_percent Float?

  rolling_type Int @default(1) // 洗碼倍數是否含儲值金計算(不含/含)

  @@unique([promotion_id, recharge_amount])
}

model Promotion {
  id    String @id @default(cuid())
  type  Int // 首儲獎勵 續儲獎勵 遊戲返水
  title String

  status Int @default(1) // 未開始, 進行中, 已結束

  schedule_type Int       @default(1) // (活動期間) 無限期 僅一次 月延續 周延續 日延續
  start_at      DateTime? @db.Timestamptz() // 無限期則留空
  end_at        DateTime? @db.Timestamptz() // 無限期則留空

  is_active           Boolean @default(false) // 關閉則佔不開放申請
  apply_approval_type Int     @default(1) // 人工審核 自動審核

  settlement_type   Int @default(1) // (生成禮包時間點) 立即結算 活動結束時結算(排程查看)
  pay_approval_type Int @default(1) // (禮包是否直接派發) 審核派發 免審派發

  vips Vip[]

  reward_max Int @default(0) // 獎勵金上限 (0為無上限)

  applicants_max Int @default(0) // 申請人數上限 (0為無上限)

  apply_times Int @default(0) // 可申請次數 (0為無限制)

  nums_rolling Float @default(1) // 洗碼倍數

  game_water GameWater[] // 返水活動(遊戲退水%)
  valid_bet  Int? // 有效投注達標值

  recharge_reward RechargeReward? // 儲值活動公式

  applicants Applicant[] // 活動報名單
  gifts      Gift[] // 活動禮包

  bank_deposits    BankDepositRec[] // 綁定活動的銀行卡儲值紀錄
  payment_deposits PaymentDepositRec[] // 綁定活動的支付工具儲值紀錄

  bet_records BetRecord[]
}

// 活動申請表 (手動核准/自動核准)
model Applicant {
  id        String @id @default(cuid())
  player    Player @relation(fields: [player_id], references: [id])
  player_id String

  promotion    Promotion @relation(fields: [promotion_id], references: [id])
  promotion_id String

  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @updatedAt @db.Timestamptz(6)

  status Int @default(1) // 未處理, 已核准, 已拒絕

  note String?

  gift Gift?

}

// 活動禮包派發 (手動派發/自動派發)
model Gift {
  id        String @id @default(cuid())
  player    Player @relation(fields: [player_id], references: [id])
  player_id String

  type Int @default(1) // 活動禮包 代理轉額禮包

  sender    Member? @relation(fields: [sender_id], references: [id])
  sender_id String?

  promotion    Promotion? @relation(fields: [promotion_id], references: [id])
  promotion_id String?

  applicant    Applicant? @relation(fields: [applicant_id], references: [id])
  applicant_id String?    @unique

  status Int @default(1) // 未派發, 已派發, 已接收

  amount Float // 禮包金額 ex: 500

  rolling_amount Float // 洗碼金額 ex: 2,000 (4倍流水)

  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  send_at     DateTime? @db.Timestamptz(6)
  recieved_at DateTime? @db.Timestamptz(6)
}

model BetRecordTicket {
  id Int @id @default(autoincrement())
  platform_code String
  max_seconds Int // 最大搜尋範圍(秒)
  kept_days Int // 數據保留時間(日)
  valid_at DateTime? @db.Timestamptz(6)
  expired_at DateTime? @db.Timestamptz(6)
}

model BetRecord {
  id              String        @id @default(cuid())
  bet_no          String
  player          Player        @relation(fields: [player_id], references: [id])
  player_id       String
  status          Int           @default(1) // 投注中 已派彩 已退款
  amount          Float
  valid_amount    Float?
  rolling_amount  Float?
  nums_rolling    Float         @default(1) // 當前遊戲洗碼量紀錄
  win_lose_amount Float?
  bet_at          DateTime      @db.Timestamptz()
  result_at       DateTime?     @db.Timestamptz()
  platform        GamePlatform  @relation(fields: [platform_code], references: [code])
  category_code   String
  platform_code   String
  game            Game?         @relation(fields: [game_code, platform_code], references: [code, platform_code])
  game_code       String? // 遊戲類型 (普通百家乐,..)
  bet_target      String? // 下注目標 (莊,閒,和,..)
  bet_detail      Json?
  ratios          BetRatioRec[]
  vip_water       Float         @default(0)

  promotion    Promotion? @relation(fields: [promotion_id], references: [id])
  promotion_id String?

  @@unique([bet_no, platform_code])
}

model BetRatioRec {
  agent      Member    @relation(fields: [agent_id], references: [id])
  agent_id   String
  bet        BetRecord @relation(fields: [bet_id], references: [id])
  bet_id     String
  ratio      Float
  water      Float
  water_duty Float

  @@unique([agent_id, bet_id])
}


model GameAccount {
  id            Int          @id @default(autoincrement())
  platform      GamePlatform @relation(fields: [platform_code], references: [code])
  platform_code String
  account       String
  password      String?
  player        Player       @relation(fields: [player_id], references: [id])
  player_id     String
  created_at    DateTime     @default(now()) @db.Timestamptz()

  credit Float @default(0)

  @@unique([platform_code, account])
  @@unique([platform_code, player_id])
}

model GameRatio {
  game_code     String
  platform_code String
  game          Game   @relation(fields: [game_code, platform_code], references: [code, platform_code])
  agent         Member @relation(fields: [agent_id], references: [id])
  agent_id      String

  ratio      Float // 89 (89%)
  water_duty Float @default(0) // 80 (80%)

  water Float @default(0) // 0.1 (0.1%)

  @@unique([platform_code, game_code, agent_id])
}

model PlayerTag {
  player    Player @relation(fields: [player_id], references: [id])
  player_id String
  type      Int // 儲值過, 提領過, 實名認證, 手機認證

  @@unique([player_id, type])
}

model SysConfig {
  code String @id
  value String
}

enum PlatformType {
  ADMIN
  AGENT
  PLAYER
}

enum PayType {
  CVS
  BARCODE
  CREDIT
  ATM
}

enum AnnouncementType {
  GAME
  OPERATION
  EVENT
  SERVICE
}
