generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  nickname      String
  admin_role_id String
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  is_blocked    Boolean        @default(false)
  admin_role    AdminRole      @relation(fields: [admin_role_id], references: [id])
  inboxs        Inbox[]
  login_rec     LoginRec[]
  operations    OperationRec[]
}

model Permission {
  id         String @id @default(cuid())
  name       String @unique
  controller String
  handler    String
  menus      Menu[]

  @@unique([controller, handler], name: "controller_handler")
}

model AdminRole {
  id    String      @id @default(cuid())
  name  String
  code  String      @unique
  users AdminUser[]
  menu  Menu[]
}

model OperationRec {
  id          Int       @id @default(autoincrement())
  controller  String
  handler     String
  operator_id String
  reqBody     Json?
  path        String
  target_id   String?
  method      String
  operated_at DateTime  @default(now())
  operator    AdminUser @relation(fields: [operator_id], references: [id])
}

model Announcement {
  id         String           @id @default(cuid())
  title      String
  content    String?
  start_at   DateTime?        @db.Timestamp(6)
  end_at     DateTime?        @db.Timestamp(6)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  type       AnnouncementType
  is_active  Boolean          @default(true)
  link       String?
  is_new_win Boolean          @default(false)
  is_top     Boolean          @default(false)
  sort       Int              @default(autoincrement())
}

model Menu {
  id           String       @id @default(cuid())
  name         String
  root_menu_id String?
  sort         Int          @default(autoincrement())
  icon         String?
  path         String?      @unique
  root_menu    Menu?        @relation("root", fields: [root_menu_id], references: [id])
  sub_menus    Menu[]       @relation("root")
  admin_roles  AdminRole[]
  permissions  Permission[]
}

model PromoCode {
  code   String  @id
  agent Member?
  player Player?
}

model ChipsRec {
  id         String   @id @default(cuid())
  player     Player   @relation(fields: [player_id], references: [id])
  player_id  String
  qty        Float
  created_at DateTime @default(now())
  type       Int
}

model RotationGroup {
  id        Int           @id @default(autoincrement())
  sort      Int
  name      String
  type      Int // 金流/銀行卡
  bank_card CompanyCard[]

  card_vip Vip[] @relation("card")
  payment_vip Vip[] @relation("payment")
}

model PlayerCard {
  id           String   @id @default(cuid())
  bank_code    String
  branch       String
  name         String
  account      String
  player       Player   @relation(fields: [player_id], references: [id])
  player_id    String
  is_default   Boolean
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  valid_status Int // 等待驗證/通過驗證/未通過驗證
  imgs         String[]
}

model CompanyCard {
  id          String        @id @default(cuid())
  bank_code   String
  branch      String
  name        String
  account     String
  min         Int
  max         Int
  total_max   Int
  bankcard    RotationGroup @relation(fields: [rotation_id], references: [id])
  rotation_id Int
  is_active Boolean @default(true)

  records BankDepositRec[]

}

model BankDepositRec {
  id         String      @id @default(cuid())
  player     Player      @relation(fields: [player_id], references: [id])
  player_id  String
  amount     Float
  card       CompanyCard @relation(fields: [card_id], references: [id])
  card_id    String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  status     Int // 等待付款/等待審核/完成核發/取消申請/拒絕退回/已過期
  acc_tail   String // 末五碼
  note       String
}


model Player {
  id         String     @id @default(cuid())
  username   String     @unique
  password   String
  nickname   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  is_active  Boolean    @default(true)
  is_blocked Boolean    @default(false)
  agent      Member     @relation(fields: [agent_id], references: [id])
  agent_id   String
  inviter    Player?    @relation("player", fields: [inviter_id], references: [id])
  inviter_id String?
  promo      PromoCode? @relation(fields: [promo_code], references: [code])
  promo_code String?    @unique
  vip        Vip?       @relation(fields: [vip_id], references: [id])
  vip_id     String?
  inboxs     Inbox[]
  invites    Player[]   @relation("player")

  contact    Contact?

  chips_records ChipsRec[]
  bank_deposits BankDepositRec[]
  bankcard      PlayerCard[]

  login_rec       LoginRec[]
}


model Member {
  id              String     @id @default(cuid())
  username        String     @unique
  password        String
  nickname        String
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  parent_id       String?
  promo_code      String?    @unique
  is_active       Boolean    @default(true)
  layer           Int        @default(1)
  is_blocked      Boolean    @default(false)
  parent          Member?    @relation("agent", fields: [parent_id], references: [id])
  promo           PromoCode? @relation(fields: [promo_code], references: [code])
  sended_inboxs   Inbox[]    @relation("from")
  received_inboxs Inbox[]    @relation("to")
  login_rec       LoginRec[]
  subs            Member[]   @relation("agent")
  players         Player[]

  contact    Contact?
}

model Contact {
  id       Int    @id @default(autoincrement())
  phone    String
  line_id   String?
  telegram String?
  email    String?

  player Player? @relation(fields: [player_id], references: [id])
  player_id String? @unique

  agent Member? @relation(fields: [agent_id], references: [id])
  agent_id String? @unique
}

model Vip {
  id           String   @id @default(cuid())
  name         String
  icon         String?
  ebet_min     Int
  deposite_min Int
  withdraw_min Int
  withdraw_max Int
  players      Player[]

  card_rotate RotationGroup @relation("card", fields: [card_rotate_id], references: [id])
  card_rotate_id Int

  payment_rotate RotationGroup @relation("payment", fields: [payment_rotate_id], references: [id])
  payment_rotate_id Int
}

enum PlatformType {
  ADMIN
  AGENT
  PLAYER
}

model LoginRec {
  id            Int        @id @default(autoincrement())
  admin_user_id String?
  agent_id      String?
  ip            String?
  login_at      DateTime   @default(now())
  nums_failed   Int        @default(0)
  failed_msg    String?
  platform PlatformType // 管端/代理端/會員端
  admin_user    AdminUser? @relation(fields: [admin_user_id], references: [id])
  agent         Member?    @relation(fields: [agent_id], references: [id])
  player Player? @relation(fields: [player_id], references: [id])
  player_id String?
}

model ActivityPromo {
  id        String    @id @default(cuid())
  pc_img    String
  mb_img    String
  title     String
  sub_title String
  content   String
  is_active Boolean
  sort      Int
  start_at  DateTime? @db.Timestamp(6)
  end_at    DateTime? @db.Timestamp(6)
}

model Banner {
  id        String    @id @default(cuid())
  pc_img    String
  mb_img    String
  name      String
  is_active Boolean
  sort      Int
  start_at  DateTime? @db.Timestamp(6)
  end_at    DateTime? @db.Timestamp(6)
}

model GameCategory {
  id        Int            @id @default(autoincrement())
  name      String
  platforms GamePlatform[]
}

model GamePlatform {
  id          String             @id @default(cuid())
  name        String
  code        String             @unique
  status      GamePlatformStatus
  sort        Int
  category_id Int
  category    GameCategory       @relation(fields: [category_id], references: [id])
  games       Game[]
}

model Game {
  id          String       @id @default(cuid())
  name        String
  is_active   Boolean
  sort        Int
  platform_id String
  platform    GamePlatform @relation(fields: [platform_id], references: [id])
}

model Inbox {
  id             String     @id @default(cuid())
  from_user_id   String?
  from_member_id String?
  to_member_id   String?
  opened_at      DateTime?
  inbox_rec_id   String
  to_player_id   String?
  from_member    Member?    @relation("from", fields: [from_member_id], references: [id])
  from_user      AdminUser? @relation(fields: [from_user_id], references: [id])
  inbox_rec      InboxRec   @relation(fields: [inbox_rec_id], references: [id], onDelete: Cascade)
  to_member      Member?    @relation("to", fields: [to_member_id], references: [id])
  to_player      Player?    @relation(fields: [to_player_id], references: [id])
}

model InboxRec {
  id          String   @id @default(cuid())
  title       String
  content     String
  sended_at   DateTime @default(now())
  target_type Int
  inboxs      Inbox[]
}

enum AnnouncementType {
  GAME
  OPERATION
  EVENT
  SERVICE
}

enum GamePlatformStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}
