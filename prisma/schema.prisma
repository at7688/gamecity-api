generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  nickname      String
  admin_role_id String
  is_blocked    Boolean        @default(false)
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  admin_role    AdminRole      @relation(fields: [admin_role_id], references: [id])
  operations    OperationRec[]

  inboxs    Inbox[]
  login_rec LoginRec[]
}

model Permission {
  id         String @id @default(cuid())
  name       String @unique
  controller String
  handler    String
  menus      Menu[]

  @@unique([controller, handler], name: "controller_handler")
}

model AdminRole {
  id    String      @id @default(cuid())
  name  String
  code  String      @unique
  users AdminUser[]
  menu  Menu[]


}

model OperationRec {
  id          Int       @id @default(autoincrement())
  controller  String
  handler     String
  operator_id String
  reqBody     Json?
  path        String
  target_id   String?
  method      String
  operated_at DateTime  @default(now())
  operator    AdminUser @relation(fields: [operator_id], references: [id])
}

model Announcement {
  id         String           @id @default(cuid())
  title      String
  content    String?
  start_at   DateTime?        @db.Timestamp(6)
  end_at     DateTime?        @db.Timestamp(6)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  type       AnnouncementType
  is_active  Boolean          @default(true)
  link       String?
  is_new_win Boolean          @default(false)
  is_top     Boolean          @default(false)
  sort       Int              @default(autoincrement())
}

model Menu {
  id           String       @id @default(cuid())
  name         String
  root_menu_id String?
  sort         Int          @default(autoincrement())
  icon         String?
  path         String?
  root_menu    Menu?        @relation("root", fields: [root_menu_id], references: [id])
  sub_menus    Menu[]       @relation("root")
  admin_roles  AdminRole[]
  permissions  Permission[]
}

model Member {
  id         String     @id @default(cuid())
  username   String     @unique
  password   String
  nickname   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  parent_id  String?
  promo_code String?    @unique
  type       MemberType
  is_active  Boolean    @default(true)
  is_blocked Boolean    @default(false)
  layer      Int        @default(1)
  parent     Member?    @relation("agent", fields: [parent_id], references: [id])
  subs       Member[]   @relation("agent")

  sended_inboxs   Inbox[] @relation("from")
  received_inboxs Inbox[] @relation("to")

  login_rec LoginRec[]
}

model LoginRec {
  id            Int        @id @default(autoincrement())
  admin_user    AdminUser? @relation(fields: [admin_user_id], references: [id])
  admin_user_id String?

  agent    Member? @relation(fields: [agent_id], references: [id])
  agent_id String?

  ip String?

  failed_msg String?

  login_at DateTime @default(now())

  nums_failed Int @default(0)
}

model ActivityPromo {
  id        String    @id @default(cuid())
  pc_img    String
  mb_img    String
  title     String
  sub_title String
  content   String
  is_active Boolean
  sort      Int
  start_at  DateTime? @db.Timestamp(6)
  end_at    DateTime? @db.Timestamp(6)
}

model Banner {
  id        String    @id @default(cuid())
  pc_img    String
  mb_img    String
  name      String
  is_active Boolean
  sort      Int
  start_at  DateTime? @db.Timestamp(6)
  end_at    DateTime? @db.Timestamp(6)
}

model GameCategory {
  id        Int            @id @default(autoincrement())
  name      String
  platforms GamePlatform[]
}

model GamePlatform {
  id          String             @id @default(cuid())
  name        String
  code        String             @unique
  status      GamePlatformStatus
  sort        Int
  category_id Int
  category    GameCategory       @relation(fields: [category_id], references: [id])
  games       Game[]
}

model Game {
  id          String       @id @default(cuid())
  name        String
  is_active   Boolean
  sort        Int
  platform_id String
  platform    GamePlatform @relation(fields: [platform_id], references: [id])
}

model Inbox {
  id           String     @id @default(cuid())
  from_user    AdminUser? @relation(fields: [from_user_id], references: [id])
  from_user_id String?

  from_member    Member? @relation("from", fields: [from_member_id], references: [id])
  from_member_id String?

  to_member    Member @relation("to", fields: [to_member_id], references: [id])
  to_member_id String

  opened_at DateTime?

  inbox_rec    InboxRec @relation(fields: [inbox_rec_id], references: [id], onDelete: Cascade)
  inbox_rec_id String
}

model InboxRec {
  id        String        @id @default(cuid())
  title     String
  content   String
  inboxs    Inbox[]
  send_type InboxSendType
  sended_at DateTime      @default(now())
}

enum InboxSendType {
  PRIVATE
  AGENTS
  PLAYERS
  SYSTEM
}

enum AnnouncementType {
  GAME
  OPERATION
  EVENT
  SERVICE
}

enum MemberType {
  PLAYER
  AGENT
}

enum GamePlatformStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}
